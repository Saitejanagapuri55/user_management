name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.10.12] # Add more Python versions if required
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: myappdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Cache Python packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Run tests with Pytest
        env:
          DATABASE_URL: postgresql+asyncpg://user:password@localhost:5432/myappdb
        run: |
          pytest || exit 1

  build-and-push-docker:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: saitejas0511@gmail.com
          password: Sailentt@55
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: saitejanagapuri/user_management_sai:${{ github.sha }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=registry,ref=saitejanagapuri/user_management_sai:cache
          cache-to: type=inline,mode=max
          
      - name: Scan the Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'saitejanagapuri/user_management_sai:${{ github.sha }}'
          format: 'table'
          exit-code: 1
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

  deploy:
    needs: build-and-push-docker
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Pull and Run Docker Image
        run: |
          docker pull saitejanagapuri/user_management_sai:${{ github.sha }}
          docker stop user_management_sai || true
          docker rm user_management_sai || true
          docker run -d --name user_management_sai -p 8000:8000 saitejanagapuri/user_management_sai:${{ github.sha }}
